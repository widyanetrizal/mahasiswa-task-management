# version: '3.9'

services:
  # =====================
  # Backend Microservices
  # =====================
  user-service:
    build:
      context: ./backend/user-service
      dockerfile: Dockerfile
    container_name: user-service
    # restart: unless-stopped
    restart: always
    volumes:
      - ./backend/user-service:/app
      - /app/node_modules
    ports:
      - "4000:4000"
    env_file:
      - ./backend/user-service/.env
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:4000/health"]
      interval: 10s
      timeout: 5s
      retries: 8
      start_period: 20s
    stdin_open: true
    command: npm start
    networks:
      - app-network

  task-service:
    build:
      context: ./backend/task-service
      dockerfile: Dockerfile
    container_name: task-service
    restart: always
    volumes:
      - ./backend/task-service:/app
      - /app/node_modules
    ports:
      - "4001:4001"
    env_file:
      - ./backend/task-service/.env
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:4001/health"]
      interval: 10s
      timeout: 5s
      retries: 8
      start_period: 20s
    stdin_open: true
    command: npm start
    networks:
      - app-network

  group-task-service:
    build:
      context: ./backend/group-task-service
      dockerfile: Dockerfile
    container_name: group-task-service
    restart: always
    volumes:
      - ./backend/group-task-service:/app
      - /app/node_modules
    ports:
      - "4002:4002"
    env_file:
      - ./backend/group-task-service/.env
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:4002/health"]
      interval: 10s
      timeout: 5s
      retries: 8
      start_period: 20s
    stdin_open: true
    command: npm start
    networks:
      - app-network

  progress-service:
    build:
      context: ./backend/progress-service
      dockerfile: Dockerfile
    container_name: progress-service
    restart: always
    volumes:
      - ./backend/progress-service:/app
      - /app/node_modules
    ports:
      - "4003:4003"
    env_file:
      - ./backend/progress-service/.env
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:4003/health"]
      interval: 10s
      timeout: 5s
      retries: 8
      start_period: 20s
    stdin_open: true
    command: npm start
    networks:
      - app-network

  notification-service:
    build:
      context: ./backend/notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    restart: always
    volumes:
      - ./backend/notification-service:/app
      - /app/node_modules
    ports:
      - "4004:4004"
    env_file:
      - ./backend/notification-service/.env
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4004/health"]
      interval: 10s
      timeout: 5s
      retries: 8
      start_period: 20s
    stdin_open: true
    command: npm start
    networks:
      - app-network

  logging-service:
    build:
      context: ./backend/logging-service
      dockerfile: Dockerfile
    container_name: logging-service
    restart: always
    volumes:
      - ./backend/logging-service:/app
      - /app/node_modules
    ports:
      - "4005:4005"
    env_file:
      - ./backend/logging-service/.env
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4005/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    command: npm start
    stdin_open: true
    networks:
      - app-network

  class-service:
    build:
      context: ./backend/class-service
      dockerfile: Dockerfile
    container_name: class-service
    restart: always
    volumes:
      - ./backend/class-service:/app
      - /app/node_modules
    ports:
      - "4006:4006"
    env_file:
      - ./backend/class-service/.env
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:4006/health"]
      interval: 10s
      timeout: 5s
      retries: 8
      start_period: 20s
    stdin_open: true
    command: npm start
    networks:
      - app-network

  # =====================
  # Databases & Brokers
  # =====================
  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
    ports:
      - "3307:3306"
    volumes:
      - ./backend/initdb:/docker-entrypoint-initdb.d
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "mysql", "-uroot", "-proot"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    mem_limit: 2g
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
      - "15692:15692"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      # RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: "-rabbitmq_prometheus return_per_object_metrics true"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics ping || exit 1"]
      interval: 10s
      timeout: 30s
      retries: 20
      start_period: 90s
    networks:
      - app-network

  phpmyadmin:
    image: phpmyadmin
    container_name: phpmyadmin
    restart: always
    ports:
      - "8086:80"
    environment:
      - PMA_ARBITRARY=1
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - app-network

  rabbitmq-exporter:
    image: kbudde/rabbitmq-exporter
    container_name: rabbitmq-exporter
    restart: always
    ports:
      - "9419:9419"
    environment:
      RABBIT_URL: http://rabbitmq:15672
      RABBIT_USER: guest
      RABBIT_PASSWORD: guest
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network

  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   container_name: frontend
  #   restart: unless-stopped
  #   ports:
  #     - "3000:80"
  #   networks:
  #     - app-network

  nginx:
    # image: nginx:latest
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: nginx-gateway
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      user-service:
        condition: service_healthy
      task-service:
        condition: service_healthy
      group-task-service:
        condition: service_healthy
      progress-service:
        condition: service_healthy
      notification-service:
        condition: service_healthy
      logging-service:
        condition: service_healthy
      class-service:
        condition: service_healthy
    networks:
      - app-network

  # =====================
  # Monitoring Stack
  # =====================
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: always
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - app-network

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: always
    ports:
      - "3001:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      # - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      # - ./monitoring/grafana/dashboards/files:/etc/grafana/provisioning/dashboards/files:ro
    depends_on:
      - prometheus
      - loki
    networks:
      - app-network

  node-exporter:
    image: prom/node-exporter
    container_name: node-exporter
    restart: always
    pid: "host"
    ports:
      - "9100:9100"
    command:
      - "--path.rootfs=/host"
    volumes:
      # - '/:/host:ro,rslave'
      - ./monitoring:/host:ro
    networks:
      - app-network

  loki:
    image: grafana/loki
    container_name: loki
    restart: always
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yml
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yml:ro
      - loki_data:/loki
    networks:
      - app-network

  promtail:
    image: grafana/promtail
    container_name: promtail
    restart: always
    volumes:
      - /var/log:/var/log
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - app-network

volumes:
  rabbitmq_data:
  mysql_data:
  grafana-storage:
  prometheus_data:
  loki_data:

networks:
  app-network:
    driver: bridge
